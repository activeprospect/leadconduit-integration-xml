// Generated by CoffeeScript 1.10.0
(function() {
  var assert, integration, types;

  assert = require('chai').assert;

  integration = require('../lib/xml');

  types = require('leadconduit-types');

  describe('Outbound XML request', function() {
    it('should have url, method, headers, and body', function() {
      var vars;
      vars = {
        url: 'http://foo.bar',
        xml_path: {
          'lead.fname': 'Mel',
          'lead.lname': 'Gibson'
        },
        header: {
          Whatever: 'foo',
          Bar: 'baz'
        }
      };
      assert.equal(integration.request(vars).url, 'http://foo.bar');
      assert.equal(integration.request(vars).method, 'POST');
      assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<lead>\n  <fname>Mel</fname>\n  <lname>Gibson</lname>\n</lead>");
      return assert.deepEqual(integration.request(vars).headers, {
        'Content-Type': 'text/xml',
        'Content-Length': 81,
        'Accept': 'application/json;q=0.9,text/xml;q=0.8,application/xml;q=0.7,text/html;q=0.6,text/plain;q=0.5',
        'Whatever': 'foo',
        'Bar': 'baz'
      });
    });
    it('should send data as ASCII when told to', function() {
      var vars;
      vars = {
        send_ascii: types.boolean.parse('true'),
        xml_path: {
          'lead.fname': 'Mêl',
          'lead.lname': 'Gibson'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<lead>\n  <fname>Mel</fname>\n  <lname>Gibson</lname>\n</lead>");
    });
    it('should send data as original UTF-8 when told to', function() {
      var vars;
      vars = {
        send_ascii: types.boolean.parse('false'),
        xml_path: {
          'lead.fname': 'Mêl',
          'lead.lname': 'Gibson'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<lead>\n  <fname>Mêl</fname>\n  <lname>Gibson</lname>\n</lead>");
    });
    it('should allow Content-Type override', function() {
      var vars;
      vars = {
        url: 'http://foo.bar',
        header: {
          'Content-Type': 'application/xml'
        }
      };
      return assert.deepEqual(integration.request(vars).headers, {
        'Content-Type': 'application/xml',
        'Content-Length': 21,
        'Accept': 'application/json;q=0.9,text/xml;q=0.8,application/xml;q=0.7,text/html;q=0.6,text/plain;q=0.5'
      });
    });
    it('should handle empty xml path', function() {
      var vars;
      vars = {
        xml_path: {}
      };
      return assert.equal(integration.request(vars).body, '<?xml version="1.0"?>');
    });
    it('should handle undefined xml path', function() {
      var vars;
      vars = {};
      return assert.equal(integration.request(vars).body, '<?xml version="1.0"?>');
    });
    it('should handle null xml path', function() {
      var vars;
      vars = {
        xml_path: void 0
      };
      return assert.equal(integration.request(vars).body, '<?xml version="1.0"?>');
    });
    it('should support simple dot-notation', function() {
      var vars;
      vars = {
        xml_path: {
          'foo.bar.baz': 'bip'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<foo>\n  <bar>\n    <baz>bip</baz>\n  </bar>\n</foo>");
    });
    it('should support dot-notation arrays', function() {
      var vars;
      vars = {
        xml_path: {
          'foo.bar.baz.0': 'bip',
          'foo.bar.baz.1': 'bap'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<foo>\n  <bar>\n    <baz>bip</baz>\n    <baz>bap</baz>\n  </bar>\n</foo>");
    });
    it('should compact array', function() {
      var vars;
      vars = {
        xml_path: {
          'foo.bar.0': 'bip',
          'foo.bar.2': 'bap'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<foo>\n  <bar>bip</bar>\n  <bar>bap</bar>\n</foo>");
    });
    it('should support dot-notation array reference', function() {
      var vars;
      vars = {
        xml_path: {
          'foo.bar.baz': ['bip', 'bap']
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<foo>\n  <bar>\n    <baz>bip</baz>\n    <baz>bap</baz>\n  </bar>\n</foo>");
    });
    it('should normalize rich types', function() {
      var vars;
      vars = {
        xml_path: {
          'lead.postal_code': types.postal_code.parse('78704'),
          'lead.phone': types.phone.parse('512-789-1111 x123'),
          'lead.boolean': types.boolean.parse('T'),
          'lead.gender': types.gender.parse('F'),
          'lead.number': types.number.parse('$100,000.00'),
          'lead.range': types.range.parse('1,000-2,000')
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<lead>\n  <postal_code>78704</postal_code>\n  <phone>5127891111x123</phone>\n  <boolean>true</boolean>\n  <gender>female</gender>\n  <number>100000</number>\n  <range>1000-2000</range>\n</lead>");
    });
    it('should normalize rich type array', function() {
      var vars;
      vars = {
        xml_path: {
          'lead.phone': [types.phone.parse('512-789-1111 x123'), types.phone.parse('512-789-2222 x456')]
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<lead>\n  <phone>5127891111x123</phone>\n  <phone>5127892222x456</phone>\n</lead>");
    });
    it('should use raw value for invalid rich types', function() {
      var vars;
      vars = {
        xml_path: {
          number: types.number.parse('foo')
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<number>foo</number>");
    });
    it('should set attribute', function() {
      var vars;
      vars = {
        xml_path: {
          'foo.bar@id': '123',
          'foo.bar': 'baz'
        }
      };
      return assert.equal(integration.request(vars).body, "<?xml version=\"1.0\"?>\n<foo>\n  <bar id=\"123\">baz</bar>\n</foo>");
    });
    it('should stuff XML into url encoded body parameter', function() {
      var req, vars;
      vars = {
        xml_path: {
          'lead.foo': 'bar',
          'lead.baz': 'bip'
        },
        xml_parameter: 'xmlData'
      };
      req = integration.request(vars);
      assert.equal(req.headers['Content-Type'], 'application/x-www-form-urlencoded');
      return assert.equal(req.body, 'xmlData=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3Clead%3E%0A%20%20%3Cfoo%3Ebar%3C%2Ffoo%3E%0A%20%20%3Cbaz%3Ebip%3C%2Fbaz%3E%0A%3C%2Flead%3E');
    });
    return it('should include additional url encoded body parameters if present', function() {
      var req, vars;
      vars = {
        xml_path: {
          'lead.foo': 'bar',
          'lead.baz': 'bip'
        },
        xml_parameter: 'xmlData',
        extra_parameter: {
          'authtoken': 'asdf1234asdf1234',
          'scope': 'crmapi'
        }
      };
      req = integration.request(vars);
      assert.equal(req.headers['Content-Type'], 'application/x-www-form-urlencoded');
      return assert.equal(req.body, 'xmlData=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3Clead%3E%0A%20%20%3Cfoo%3Ebar%3C%2Ffoo%3E%0A%20%20%3Cbaz%3Ebip%3C%2Fbaz%3E%0A%3C%2Flead%3E&authtoken=asdf1234asdf1234&scope=crmapi');
    });
  });

  describe('XML validation', function() {
    it('should require valid URL', function() {
      return assert.equal(integration.validate({}), 'URL is required');
    });
    it('should require not require method', function() {
      return assert.isUndefined(integration.validate({
        url: 'http://foo'
      }));
    });
    it('should require valid method', function() {
      return assert.equal(integration.validate({
        url: 'http://foo',
        method: 'HEAD'
      }), 'Unsupported HTTP method - use POST, PUT');
    });
    it('should require valid search outcome', function() {
      return assert.equal(integration.validate({
        url: 'http://foo',
        outcome_on_match: 'donkey'
      }), "Outcome on match must be 'success' or 'failure'");
    });
    it('should pass validation', function() {
      return assert.isUndefined(integration.validate({
        url: 'http://foo'
      }));
    });
    it('should allow valid content-type header', function() {
      return assert.isUndefined(integration.validate({
        url: 'http://foo',
        header: {
          'Content-Type': 'application/xml'
        }
      }));
    });
    it('should not allow invalid content-type header', function() {
      return assert.equal(integration.validate({
        url: 'http://foo',
        header: {
          'Content-Type': 'text/plain'
        }
      }), 'Invalid Content-Type header value');
    });
    it('should not allow content-length header', function() {
      return assert.equal(integration.validate({
        url: 'http://foo',
        header: {
          'Content-Length': '10'
        }
      }), 'Content-Length header is not allowed');
    });
    return it('should not allow accept header', function() {
      return assert.equal(integration.validate({
        url: 'http://foo',
        header: {
          'Accept': 'text/whatever'
        }
      }), 'Accept header is not allowed');
    });
  });

}).call(this);
